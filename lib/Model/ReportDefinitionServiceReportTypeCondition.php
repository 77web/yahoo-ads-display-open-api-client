<?php
/**
 * ReportDefinitionServiceReportTypeCondition
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  YahooAdsDisplayApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference
 *
 * <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v4/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>
 *
 * The version of the OpenAPI document: v4
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace YahooAdsDisplayApi\Client\Model;

use \ArrayAccess;
use \YahooAdsDisplayApi\Client\ObjectSerializer;

/**
 * ReportDefinitionServiceReportTypeCondition Class Doc Comment
 *
 * @category Class
 * @description &lt;div lang&#x3D;\&quot;ja\&quot;&gt;   ReportDefinitionServiceReportTypeConditionオブジェクトは、各レポートタイプごとのレポート作成条件を表します。&lt;br&gt;   このフィールドは、ADD時に省略可能となり、REMOVE時に無視されます。 &lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;   ReportDefinitionServiceReportTypeCondition describes the condition to create each report type.   This field is optional in ADD operation, and will be ignored in REMOVE operation.  &lt;/div&gt;
 * @package  YahooAdsDisplayApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ReportDefinitionServiceReportTypeCondition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReportDefinitionServiceReportTypeCondition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'conversion_path_report_condition' => '\YahooAdsDisplayApi\Client\Model\ReportDefinitionServiceConversionPathReportCondition',
        'cross_campaign_reaches_report_condition' => '\YahooAdsDisplayApi\Client\Model\ReportDefinitionServiceCrossCampaignReachesReportCondition',
        'frequency_report_condition' => '\YahooAdsDisplayApi\Client\Model\ReportDefinitionServiceFrequencyReportCondition',
        'reach_report_condition' => '\YahooAdsDisplayApi\Client\Model\ReportDefinitionServiceReachReportCondition',
        'report_type' => '\YahooAdsDisplayApi\Client\Model\ReportDefinitionServiceType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'conversion_path_report_condition' => null,
        'cross_campaign_reaches_report_condition' => null,
        'frequency_report_condition' => null,
        'reach_report_condition' => null,
        'report_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'conversion_path_report_condition' => 'conversionPathReportCondition',
        'cross_campaign_reaches_report_condition' => 'crossCampaignReachesReportCondition',
        'frequency_report_condition' => 'frequencyReportCondition',
        'reach_report_condition' => 'reachReportCondition',
        'report_type' => 'reportType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'conversion_path_report_condition' => 'setConversionPathReportCondition',
        'cross_campaign_reaches_report_condition' => 'setCrossCampaignReachesReportCondition',
        'frequency_report_condition' => 'setFrequencyReportCondition',
        'reach_report_condition' => 'setReachReportCondition',
        'report_type' => 'setReportType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'conversion_path_report_condition' => 'getConversionPathReportCondition',
        'cross_campaign_reaches_report_condition' => 'getCrossCampaignReachesReportCondition',
        'frequency_report_condition' => 'getFrequencyReportCondition',
        'reach_report_condition' => 'getReachReportCondition',
        'report_type' => 'getReportType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['conversion_path_report_condition'] = $data['conversion_path_report_condition'] ?? null;
        $this->container['cross_campaign_reaches_report_condition'] = $data['cross_campaign_reaches_report_condition'] ?? null;
        $this->container['frequency_report_condition'] = $data['frequency_report_condition'] ?? null;
        $this->container['reach_report_condition'] = $data['reach_report_condition'] ?? null;
        $this->container['report_type'] = $data['report_type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets conversion_path_report_condition
     *
     * @return \YahooAdsDisplayApi\Client\Model\ReportDefinitionServiceConversionPathReportCondition|null
     */
    public function getConversionPathReportCondition()
    {
        return $this->container['conversion_path_report_condition'];
    }

    /**
     * Sets conversion_path_report_condition
     *
     * @param \YahooAdsDisplayApi\Client\Model\ReportDefinitionServiceConversionPathReportCondition|null $conversion_path_report_condition conversion_path_report_condition
     *
     * @return self
     */
    public function setConversionPathReportCondition($conversion_path_report_condition)
    {
        $this->container['conversion_path_report_condition'] = $conversion_path_report_condition;

        return $this;
    }

    /**
     * Gets cross_campaign_reaches_report_condition
     *
     * @return \YahooAdsDisplayApi\Client\Model\ReportDefinitionServiceCrossCampaignReachesReportCondition|null
     */
    public function getCrossCampaignReachesReportCondition()
    {
        return $this->container['cross_campaign_reaches_report_condition'];
    }

    /**
     * Sets cross_campaign_reaches_report_condition
     *
     * @param \YahooAdsDisplayApi\Client\Model\ReportDefinitionServiceCrossCampaignReachesReportCondition|null $cross_campaign_reaches_report_condition cross_campaign_reaches_report_condition
     *
     * @return self
     */
    public function setCrossCampaignReachesReportCondition($cross_campaign_reaches_report_condition)
    {
        $this->container['cross_campaign_reaches_report_condition'] = $cross_campaign_reaches_report_condition;

        return $this;
    }

    /**
     * Gets frequency_report_condition
     *
     * @return \YahooAdsDisplayApi\Client\Model\ReportDefinitionServiceFrequencyReportCondition|null
     */
    public function getFrequencyReportCondition()
    {
        return $this->container['frequency_report_condition'];
    }

    /**
     * Sets frequency_report_condition
     *
     * @param \YahooAdsDisplayApi\Client\Model\ReportDefinitionServiceFrequencyReportCondition|null $frequency_report_condition frequency_report_condition
     *
     * @return self
     */
    public function setFrequencyReportCondition($frequency_report_condition)
    {
        $this->container['frequency_report_condition'] = $frequency_report_condition;

        return $this;
    }

    /**
     * Gets reach_report_condition
     *
     * @return \YahooAdsDisplayApi\Client\Model\ReportDefinitionServiceReachReportCondition|null
     */
    public function getReachReportCondition()
    {
        return $this->container['reach_report_condition'];
    }

    /**
     * Sets reach_report_condition
     *
     * @param \YahooAdsDisplayApi\Client\Model\ReportDefinitionServiceReachReportCondition|null $reach_report_condition reach_report_condition
     *
     * @return self
     */
    public function setReachReportCondition($reach_report_condition)
    {
        $this->container['reach_report_condition'] = $reach_report_condition;

        return $this;
    }

    /**
     * Gets report_type
     *
     * @return \YahooAdsDisplayApi\Client\Model\ReportDefinitionServiceType|null
     */
    public function getReportType()
    {
        return $this->container['report_type'];
    }

    /**
     * Sets report_type
     *
     * @param \YahooAdsDisplayApi\Client\Model\ReportDefinitionServiceType|null $report_type report_type
     *
     * @return self
     */
    public function setReportType($report_type)
    {
        $this->container['report_type'] = $report_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


