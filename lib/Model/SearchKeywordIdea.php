<?php
/**
 * SearchKeywordIdea
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  YahooAdsDisplayApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference
 *
 * <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v4/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>
 *
 * The version of the OpenAPI document: v4
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace YahooAdsDisplayApi\Client\Model;

use \ArrayAccess;
use \YahooAdsDisplayApi\Client\ObjectSerializer;

/**
 * SearchKeywordIdea Class Doc Comment
 *
 * @category Class
 * @description &lt;div lang&#x3D;\&quot;ja\&quot;&gt;SearchKeywordIdeaオブジェクトは、サーチターゲティング対象キーワードです。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;SearchKeywordIdea object is keyword for search targeting.&lt;/div&gt;
 * @package  YahooAdsDisplayApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SearchKeywordIdea implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SearchKeywordIdea';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'desktop_search_volume' => 'int',
        'release_date' => 'string',
        'search_keyword' => 'string',
        'search_keyword_id' => 'int',
        'smart_phone_search_volume' => 'int',
        'tablet_search_volume' => 'int',
        'close_date' => 'string',
        'availability_status' => '\YahooAdsDisplayApi\Client\Model\SearchKeywordIdeaServiceAvailabilityStatus'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'desktop_search_volume' => 'int64',
        'release_date' => null,
        'search_keyword' => null,
        'search_keyword_id' => 'int64',
        'smart_phone_search_volume' => 'int64',
        'tablet_search_volume' => 'int64',
        'close_date' => null,
        'availability_status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'desktop_search_volume' => 'desktopSearchVolume',
        'release_date' => 'releaseDate',
        'search_keyword' => 'searchKeyword',
        'search_keyword_id' => 'searchKeywordId',
        'smart_phone_search_volume' => 'smartPhoneSearchVolume',
        'tablet_search_volume' => 'tabletSearchVolume',
        'close_date' => 'closeDate',
        'availability_status' => 'availabilityStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'desktop_search_volume' => 'setDesktopSearchVolume',
        'release_date' => 'setReleaseDate',
        'search_keyword' => 'setSearchKeyword',
        'search_keyword_id' => 'setSearchKeywordId',
        'smart_phone_search_volume' => 'setSmartPhoneSearchVolume',
        'tablet_search_volume' => 'setTabletSearchVolume',
        'close_date' => 'setCloseDate',
        'availability_status' => 'setAvailabilityStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'desktop_search_volume' => 'getDesktopSearchVolume',
        'release_date' => 'getReleaseDate',
        'search_keyword' => 'getSearchKeyword',
        'search_keyword_id' => 'getSearchKeywordId',
        'smart_phone_search_volume' => 'getSmartPhoneSearchVolume',
        'tablet_search_volume' => 'getTabletSearchVolume',
        'close_date' => 'getCloseDate',
        'availability_status' => 'getAvailabilityStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['desktop_search_volume'] = $data['desktop_search_volume'] ?? null;
        $this->container['release_date'] = $data['release_date'] ?? null;
        $this->container['search_keyword'] = $data['search_keyword'] ?? null;
        $this->container['search_keyword_id'] = $data['search_keyword_id'] ?? null;
        $this->container['smart_phone_search_volume'] = $data['smart_phone_search_volume'] ?? null;
        $this->container['tablet_search_volume'] = $data['tablet_search_volume'] ?? null;
        $this->container['close_date'] = $data['close_date'] ?? null;
        $this->container['availability_status'] = $data['availability_status'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets desktop_search_volume
     *
     * @return int|null
     */
    public function getDesktopSearchVolume()
    {
        return $this->container['desktop_search_volume'];
    }

    /**
     * Sets desktop_search_volume
     *
     * @param int|null $desktop_search_volume <div lang=\"ja\"> PCでのリーチ数です。<br> ※1000件未満の場合は<br> 0が取得されます。<br> ※サーチキーワードの停止日以降はnullが返却されます。 </div> <div lang=\"en\"> Reach numbers on PC.<br> *If it is less than 1000 times, the value &#34;0&#34; will be responded.<br> *After the stop date of search keyword, null will be returned. </div>
     *
     * @return self
     */
    public function setDesktopSearchVolume($desktop_search_volume)
    {
        $this->container['desktop_search_volume'] = $desktop_search_volume;

        return $this;
    }

    /**
     * Gets release_date
     *
     * @return string|null
     */
    public function getReleaseDate()
    {
        return $this->container['release_date'];
    }

    /**
     * Sets release_date
     *
     * @param string|null $release_date <div lang=\"ja\">サーチキーワード追加日です。<br> ※フォーマット：yyyyMMdd</div> <div lang=\"en\"> Additional date of keyword.<br> * Format: yyyyMMdd</div>
     *
     * @return self
     */
    public function setReleaseDate($release_date)
    {
        $this->container['release_date'] = $release_date;

        return $this;
    }

    /**
     * Gets search_keyword
     *
     * @return string|null
     */
    public function getSearchKeyword()
    {
        return $this->container['search_keyword'];
    }

    /**
     * Sets search_keyword
     *
     * @param string|null $search_keyword <div lang=\"ja\">サーチキーワードです。</div> <div lang=\"en\">Search keyword.</div>
     *
     * @return self
     */
    public function setSearchKeyword($search_keyword)
    {
        $this->container['search_keyword'] = $search_keyword;

        return $this;
    }

    /**
     * Gets search_keyword_id
     *
     * @return int|null
     */
    public function getSearchKeywordId()
    {
        return $this->container['search_keyword_id'];
    }

    /**
     * Sets search_keyword_id
     *
     * @param int|null $search_keyword_id <div lang=\"ja\">サーチキーワードIDです。</div> <div lang=\"en\">Search keyword ID.</div>
     *
     * @return self
     */
    public function setSearchKeywordId($search_keyword_id)
    {
        $this->container['search_keyword_id'] = $search_keyword_id;

        return $this;
    }

    /**
     * Gets smart_phone_search_volume
     *
     * @return int|null
     */
    public function getSmartPhoneSearchVolume()
    {
        return $this->container['smart_phone_search_volume'];
    }

    /**
     * Sets smart_phone_search_volume
     *
     * @param int|null $smart_phone_search_volume <div lang=\"ja\"> スマートフォンでのリーチ数です。<br> ※1000件未満の場合は<br> 0が取得されます。<br> ※サーチキーワードの停止日以降はnullが返却されます。 </div> <div lang=\"en\"> Reach numbers on Smartphone.<br> *If it is less than 1000 times, the value &#34;0&#34; will be responded.<br> *After the stop date of search keyword, null will be returned. </div>
     *
     * @return self
     */
    public function setSmartPhoneSearchVolume($smart_phone_search_volume)
    {
        $this->container['smart_phone_search_volume'] = $smart_phone_search_volume;

        return $this;
    }

    /**
     * Gets tablet_search_volume
     *
     * @return int|null
     */
    public function getTabletSearchVolume()
    {
        return $this->container['tablet_search_volume'];
    }

    /**
     * Sets tablet_search_volume
     *
     * @param int|null $tablet_search_volume <div lang=\"ja\"> タブレットでのリーチ数です。<br> ※1000件未満の場合は<br> 0が取得されます。<br> ※サーチキーワードの停止日以降はnullが返却されます。 </div> <div lang=\"en\"> Reach numbers on Tablet.<br> *If it is less than 1000 times, the value &#34;0&#34; will be responded.<br> *After the stop date of search keyword, null will be returned. </div>
     *
     * @return self
     */
    public function setTabletSearchVolume($tablet_search_volume)
    {
        $this->container['tablet_search_volume'] = $tablet_search_volume;

        return $this;
    }

    /**
     * Gets close_date
     *
     * @return string|null
     */
    public function getCloseDate()
    {
        return $this->container['close_date'];
    }

    /**
     * Sets close_date
     *
     * @param string|null $close_date <div lang=\"ja\">サーチキーワード停止日です。<br> ※フォーマット：yyyyMMdd</div> <div lang=\"en\"> Stop date of keyword.<br> * Format: yyyyMMdd</div>
     *
     * @return self
     */
    public function setCloseDate($close_date)
    {
        $this->container['close_date'] = $close_date;

        return $this;
    }

    /**
     * Gets availability_status
     *
     * @return \YahooAdsDisplayApi\Client\Model\SearchKeywordIdeaServiceAvailabilityStatus|null
     */
    public function getAvailabilityStatus()
    {
        return $this->container['availability_status'];
    }

    /**
     * Sets availability_status
     *
     * @param \YahooAdsDisplayApi\Client\Model\SearchKeywordIdeaServiceAvailabilityStatus|null $availability_status availability_status
     *
     * @return self
     */
    public function setAvailabilityStatus($availability_status)
    {
        $this->container['availability_status'] = $availability_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


