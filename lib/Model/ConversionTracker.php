<?php
/**
 * ConversionTracker
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  YahooAdsDisplayApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference
 *
 * <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v4/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>
 *
 * The version of the OpenAPI document: v4
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace YahooAdsDisplayApi\Client\Model;

use \ArrayAccess;
use \YahooAdsDisplayApi\Client\ObjectSerializer;

/**
 * ConversionTracker Class Doc Comment
 *
 * @category Class
 * @description &lt;div lang&#x3D;\&quot;ja\&quot;&gt;ConversionTrackerオブジェクトは、コンバージョン測定タグやタグごとのパフォーマンスデータなどのコンバージョントラッカー情報を表します。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;ConversionTracker object shows ConversionTracker information such as ConversionTag and performance data by tag.&lt;/div&gt;
 * @package  YahooAdsDisplayApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ConversionTracker implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConversionTracker';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'int',
        'all_conversion_value' => 'string',
        'all_conversions' => 'int',
        'view_through_conversions' => 'int',
        'app_conversion' => '\YahooAdsDisplayApi\Client\Model\ConversionTrackerServiceAppConversion',
        'category' => '\YahooAdsDisplayApi\Client\Model\ConversionTrackerServiceCategory',
        'conversion_tracker_id' => 'int',
        'conversion_tracker_name' => 'string',
        'conversion_tracker_type' => '\YahooAdsDisplayApi\Client\Model\ConversionTrackerServiceType',
        'conversion_value' => 'string',
        'conversion_value_via_ad_click' => 'string',
        'conversions' => 'int',
        'conversions_via_ad_click' => 'int',
        'counting_type' => '\YahooAdsDisplayApi\Client\Model\ConversionTrackerServiceCountingType',
        'cross_device_conversions' => 'int',
        'exclude_from_bidding' => '\YahooAdsDisplayApi\Client\Model\ConversionTrackerServiceExcludeFromBidding',
        'measurement_period' => 'int',
        'measurement_period_view' => 'int',
        'most_recent_conversion_date' => 'string',
        'status' => '\YahooAdsDisplayApi\Client\Model\ConversionTrackerServiceStatus',
        'user_revenue_value' => 'int',
        'web_conversion' => '\YahooAdsDisplayApi\Client\Model\ConversionTrackerServiceWebConversion'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => 'int64',
        'all_conversion_value' => null,
        'all_conversions' => 'int64',
        'view_through_conversions' => 'int64',
        'app_conversion' => null,
        'category' => null,
        'conversion_tracker_id' => 'int64',
        'conversion_tracker_name' => null,
        'conversion_tracker_type' => null,
        'conversion_value' => null,
        'conversion_value_via_ad_click' => null,
        'conversions' => 'int64',
        'conversions_via_ad_click' => 'int64',
        'counting_type' => null,
        'cross_device_conversions' => 'int64',
        'exclude_from_bidding' => null,
        'measurement_period' => 'int32',
        'measurement_period_view' => 'int32',
        'most_recent_conversion_date' => null,
        'status' => null,
        'user_revenue_value' => 'int64',
        'web_conversion' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'all_conversion_value' => 'allConversionValue',
        'all_conversions' => 'allConversions',
        'view_through_conversions' => 'viewThroughConversions',
        'app_conversion' => 'appConversion',
        'category' => 'category',
        'conversion_tracker_id' => 'conversionTrackerId',
        'conversion_tracker_name' => 'conversionTrackerName',
        'conversion_tracker_type' => 'conversionTrackerType',
        'conversion_value' => 'conversionValue',
        'conversion_value_via_ad_click' => 'conversionValueViaAdClick',
        'conversions' => 'conversions',
        'conversions_via_ad_click' => 'conversionsViaAdClick',
        'counting_type' => 'countingType',
        'cross_device_conversions' => 'crossDeviceConversions',
        'exclude_from_bidding' => 'excludeFromBidding',
        'measurement_period' => 'measurementPeriod',
        'measurement_period_view' => 'measurementPeriodView',
        'most_recent_conversion_date' => 'mostRecentConversionDate',
        'status' => 'status',
        'user_revenue_value' => 'userRevenueValue',
        'web_conversion' => 'webConversion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'all_conversion_value' => 'setAllConversionValue',
        'all_conversions' => 'setAllConversions',
        'view_through_conversions' => 'setViewThroughConversions',
        'app_conversion' => 'setAppConversion',
        'category' => 'setCategory',
        'conversion_tracker_id' => 'setConversionTrackerId',
        'conversion_tracker_name' => 'setConversionTrackerName',
        'conversion_tracker_type' => 'setConversionTrackerType',
        'conversion_value' => 'setConversionValue',
        'conversion_value_via_ad_click' => 'setConversionValueViaAdClick',
        'conversions' => 'setConversions',
        'conversions_via_ad_click' => 'setConversionsViaAdClick',
        'counting_type' => 'setCountingType',
        'cross_device_conversions' => 'setCrossDeviceConversions',
        'exclude_from_bidding' => 'setExcludeFromBidding',
        'measurement_period' => 'setMeasurementPeriod',
        'measurement_period_view' => 'setMeasurementPeriodView',
        'most_recent_conversion_date' => 'setMostRecentConversionDate',
        'status' => 'setStatus',
        'user_revenue_value' => 'setUserRevenueValue',
        'web_conversion' => 'setWebConversion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'all_conversion_value' => 'getAllConversionValue',
        'all_conversions' => 'getAllConversions',
        'view_through_conversions' => 'getViewThroughConversions',
        'app_conversion' => 'getAppConversion',
        'category' => 'getCategory',
        'conversion_tracker_id' => 'getConversionTrackerId',
        'conversion_tracker_name' => 'getConversionTrackerName',
        'conversion_tracker_type' => 'getConversionTrackerType',
        'conversion_value' => 'getConversionValue',
        'conversion_value_via_ad_click' => 'getConversionValueViaAdClick',
        'conversions' => 'getConversions',
        'conversions_via_ad_click' => 'getConversionsViaAdClick',
        'counting_type' => 'getCountingType',
        'cross_device_conversions' => 'getCrossDeviceConversions',
        'exclude_from_bidding' => 'getExcludeFromBidding',
        'measurement_period' => 'getMeasurementPeriod',
        'measurement_period_view' => 'getMeasurementPeriodView',
        'most_recent_conversion_date' => 'getMostRecentConversionDate',
        'status' => 'getStatus',
        'user_revenue_value' => 'getUserRevenueValue',
        'web_conversion' => 'getWebConversion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['all_conversion_value'] = $data['all_conversion_value'] ?? null;
        $this->container['all_conversions'] = $data['all_conversions'] ?? null;
        $this->container['view_through_conversions'] = $data['view_through_conversions'] ?? null;
        $this->container['app_conversion'] = $data['app_conversion'] ?? null;
        $this->container['category'] = $data['category'] ?? null;
        $this->container['conversion_tracker_id'] = $data['conversion_tracker_id'] ?? null;
        $this->container['conversion_tracker_name'] = $data['conversion_tracker_name'] ?? null;
        $this->container['conversion_tracker_type'] = $data['conversion_tracker_type'] ?? null;
        $this->container['conversion_value'] = $data['conversion_value'] ?? null;
        $this->container['conversion_value_via_ad_click'] = $data['conversion_value_via_ad_click'] ?? null;
        $this->container['conversions'] = $data['conversions'] ?? null;
        $this->container['conversions_via_ad_click'] = $data['conversions_via_ad_click'] ?? null;
        $this->container['counting_type'] = $data['counting_type'] ?? null;
        $this->container['cross_device_conversions'] = $data['cross_device_conversions'] ?? null;
        $this->container['exclude_from_bidding'] = $data['exclude_from_bidding'] ?? null;
        $this->container['measurement_period'] = $data['measurement_period'] ?? null;
        $this->container['measurement_period_view'] = $data['measurement_period_view'] ?? null;
        $this->container['most_recent_conversion_date'] = $data['most_recent_conversion_date'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['user_revenue_value'] = $data['user_revenue_value'] ?? null;
        $this->container['web_conversion'] = $data['web_conversion'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id <div lang=\"ja\"> アカウントIDです。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。 </div> <div lang=\"en\"> Account ID.<br> Although this field will be returned in the response, it will be ignored on input. </div>
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets all_conversion_value
     *
     * @return string|null
     */
    public function getAllConversionValue()
    {
        return $this->container['all_conversion_value'];
    }

    /**
     * Sets all_conversion_value
     *
     * @param string|null $all_conversion_value <div lang=\"ja\"> コンバージョンの価値（全て）です。 </div> <div lang=\"en\"> Conv. value (all). </div>
     *
     * @return self
     */
    public function setAllConversionValue($all_conversion_value)
    {
        $this->container['all_conversion_value'] = $all_conversion_value;

        return $this;
    }

    /**
     * Gets all_conversions
     *
     * @return int|null
     */
    public function getAllConversions()
    {
        return $this->container['all_conversions'];
    }

    /**
     * Sets all_conversions
     *
     * @param int|null $all_conversions <div lang=\"ja\"> コンバージョン数（全て）です。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。 </div> <div lang=\"en\"> Conversions (all).<br> Although this field will be returned in the response, it will be ignored on input. </div>
     *
     * @return self
     */
    public function setAllConversions($all_conversions)
    {
        $this->container['all_conversions'] = $all_conversions;

        return $this;
    }

    /**
     * Gets view_through_conversions
     *
     * @return int|null
     */
    public function getViewThroughConversions()
    {
        return $this->container['view_through_conversions'];
    }

    /**
     * Sets view_through_conversions
     *
     * @param int|null $view_through_conversions <div lang=\"ja\">ビュースルーコンバージョン数</div> <div lang=\"en\">View through conversions</div>
     *
     * @return self
     */
    public function setViewThroughConversions($view_through_conversions)
    {
        $this->container['view_through_conversions'] = $view_through_conversions;

        return $this;
    }

    /**
     * Gets app_conversion
     *
     * @return \YahooAdsDisplayApi\Client\Model\ConversionTrackerServiceAppConversion|null
     */
    public function getAppConversion()
    {
        return $this->container['app_conversion'];
    }

    /**
     * Sets app_conversion
     *
     * @param \YahooAdsDisplayApi\Client\Model\ConversionTrackerServiceAppConversion|null $app_conversion app_conversion
     *
     * @return self
     */
    public function setAppConversion($app_conversion)
    {
        $this->container['app_conversion'] = $app_conversion;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \YahooAdsDisplayApi\Client\Model\ConversionTrackerServiceCategory|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \YahooAdsDisplayApi\Client\Model\ConversionTrackerServiceCategory|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets conversion_tracker_id
     *
     * @return int|null
     */
    public function getConversionTrackerId()
    {
        return $this->container['conversion_tracker_id'];
    }

    /**
     * Sets conversion_tracker_id
     *
     * @param int|null $conversion_tracker_id <div lang=\"ja\"> コンバージョントラッカーIDです。<br> このフィールドは、ADD時は無視され、SET時は必須となります。 </div> <div lang=\"en\"> Conversion Tracker ID.<br> This field will be ignored in ADD operation, and will be required in SET operation. </div>
     *
     * @return self
     */
    public function setConversionTrackerId($conversion_tracker_id)
    {
        $this->container['conversion_tracker_id'] = $conversion_tracker_id;

        return $this;
    }

    /**
     * Gets conversion_tracker_name
     *
     * @return string|null
     */
    public function getConversionTrackerName()
    {
        return $this->container['conversion_tracker_name'];
    }

    /**
     * Sets conversion_tracker_name
     *
     * @param string|null $conversion_tracker_name <div lang=\"ja\"> コンバージョントラッカー名です。<br> このフィールドは、ADD時は必須となり、SET時は省略可能となります。 </div> <div lang=\"en\"> Conversion Tracker Name.<br> This field is required in ADD operation, and will be optional in SET operation. </div>
     *
     * @return self
     */
    public function setConversionTrackerName($conversion_tracker_name)
    {
        $this->container['conversion_tracker_name'] = $conversion_tracker_name;

        return $this;
    }

    /**
     * Gets conversion_tracker_type
     *
     * @return \YahooAdsDisplayApi\Client\Model\ConversionTrackerServiceType|null
     */
    public function getConversionTrackerType()
    {
        return $this->container['conversion_tracker_type'];
    }

    /**
     * Sets conversion_tracker_type
     *
     * @param \YahooAdsDisplayApi\Client\Model\ConversionTrackerServiceType|null $conversion_tracker_type conversion_tracker_type
     *
     * @return self
     */
    public function setConversionTrackerType($conversion_tracker_type)
    {
        $this->container['conversion_tracker_type'] = $conversion_tracker_type;

        return $this;
    }

    /**
     * Gets conversion_value
     *
     * @return string|null
     */
    public function getConversionValue()
    {
        return $this->container['conversion_value'];
    }

    /**
     * Sets conversion_value
     *
     * @param string|null $conversion_value <div lang=\"ja\"> コンバージョンの価値/コンバージョン数です。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。 </div> <div lang=\"en\"> Conv. value/conv.<br> Although this field will be returned in the response, it will be ignored on input. </div>
     *
     * @return self
     */
    public function setConversionValue($conversion_value)
    {
        $this->container['conversion_value'] = $conversion_value;

        return $this;
    }

    /**
     * Gets conversion_value_via_ad_click
     *
     * @return string|null
     */
    public function getConversionValueViaAdClick()
    {
        return $this->container['conversion_value_via_ad_click'];
    }

    /**
     * Sets conversion_value_via_ad_click
     *
     * @param string|null $conversion_value_via_ad_click <div lang=\"ja\"> コンバージョンの価値（クリック経由）です。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。 </div> <div lang=\"en\"> Conv. value (via click).<br> Although this field will be returned in the response, it will be ignored on input. </div>
     *
     * @return self
     */
    public function setConversionValueViaAdClick($conversion_value_via_ad_click)
    {
        $this->container['conversion_value_via_ad_click'] = $conversion_value_via_ad_click;

        return $this;
    }

    /**
     * Gets conversions
     *
     * @return int|null
     */
    public function getConversions()
    {
        return $this->container['conversions'];
    }

    /**
     * Sets conversions
     *
     * @param int|null $conversions <div lang=\"ja\"> コンバージョン数です。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。 </div> <div lang=\"en\"> Conversions.<br> Although this field will be returned in the response, it will be ignored on input. </div>
     *
     * @return self
     */
    public function setConversions($conversions)
    {
        $this->container['conversions'] = $conversions;

        return $this;
    }

    /**
     * Gets conversions_via_ad_click
     *
     * @return int|null
     */
    public function getConversionsViaAdClick()
    {
        return $this->container['conversions_via_ad_click'];
    }

    /**
     * Sets conversions_via_ad_click
     *
     * @param int|null $conversions_via_ad_click <div lang=\"ja\"> コンバージョン数（クリック経由）です。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。 </div> <div lang=\"en\"> Conversions (via click).<br> Although this field will be returned in the response, it will be ignored on input. </div>
     *
     * @return self
     */
    public function setConversionsViaAdClick($conversions_via_ad_click)
    {
        $this->container['conversions_via_ad_click'] = $conversions_via_ad_click;

        return $this;
    }

    /**
     * Gets counting_type
     *
     * @return \YahooAdsDisplayApi\Client\Model\ConversionTrackerServiceCountingType|null
     */
    public function getCountingType()
    {
        return $this->container['counting_type'];
    }

    /**
     * Sets counting_type
     *
     * @param \YahooAdsDisplayApi\Client\Model\ConversionTrackerServiceCountingType|null $counting_type counting_type
     *
     * @return self
     */
    public function setCountingType($counting_type)
    {
        $this->container['counting_type'] = $counting_type;

        return $this;
    }

    /**
     * Gets cross_device_conversions
     *
     * @return int|null
     */
    public function getCrossDeviceConversions()
    {
        return $this->container['cross_device_conversions'];
    }

    /**
     * Sets cross_device_conversions
     *
     * @param int|null $cross_device_conversions <div lang=\"ja\"> クロスデバイスコンバージョン数です。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。 </div> <div lang=\"en\"> Cross-device conv.<br> Although this field will be returned in the response, it will be ignored on input. </div>
     *
     * @return self
     */
    public function setCrossDeviceConversions($cross_device_conversions)
    {
        $this->container['cross_device_conversions'] = $cross_device_conversions;

        return $this;
    }

    /**
     * Gets exclude_from_bidding
     *
     * @return \YahooAdsDisplayApi\Client\Model\ConversionTrackerServiceExcludeFromBidding|null
     */
    public function getExcludeFromBidding()
    {
        return $this->container['exclude_from_bidding'];
    }

    /**
     * Sets exclude_from_bidding
     *
     * @param \YahooAdsDisplayApi\Client\Model\ConversionTrackerServiceExcludeFromBidding|null $exclude_from_bidding exclude_from_bidding
     *
     * @return self
     */
    public function setExcludeFromBidding($exclude_from_bidding)
    {
        $this->container['exclude_from_bidding'] = $exclude_from_bidding;

        return $this;
    }

    /**
     * Gets measurement_period
     *
     * @return int|null
     */
    public function getMeasurementPeriod()
    {
        return $this->container['measurement_period'];
    }

    /**
     * Sets measurement_period
     *
     * @param int|null $measurement_period <div lang=\"ja\"> 計測期間（単位：日）です。<br> ※7～90の範囲内で指定可能です。<br> このフィールドは、リクエストの場合は省略可能です。ADD時のデフォルト設定値は30となります。 </div> <div lang=\"en\"> Counting period (Unit: Day).<br> ∗ Can be specified within the range of 7 to 90 days.<br> This field is optional in requests. The default value in ADD operation will be 30. </div>
     *
     * @return self
     */
    public function setMeasurementPeriod($measurement_period)
    {
        $this->container['measurement_period'] = $measurement_period;

        return $this;
    }

    /**
     * Gets measurement_period_view
     *
     * @return int|null
     */
    public function getMeasurementPeriodView()
    {
        return $this->container['measurement_period_view'];
    }

    /**
     * Sets measurement_period_view
     *
     * @param int|null $measurement_period_view <div lang=\"ja\"> 測定期間（動画視聴）<br> ※1-30の範囲で指定可能です。<br> このフィールドは、リクエストの場合は省略可能です。ADD時のデフォルト設定値は1となります。 </div> <div lang=\"en\"> Counting period (Video view).<br> ∗ Can be specified within the range of 1 to 30.<br> This field is optional in requests. The default value in ADD operation will be 1. </div>
     *
     * @return self
     */
    public function setMeasurementPeriodView($measurement_period_view)
    {
        $this->container['measurement_period_view'] = $measurement_period_view;

        return $this;
    }

    /**
     * Gets most_recent_conversion_date
     *
     * @return string|null
     */
    public function getMostRecentConversionDate()
    {
        return $this->container['most_recent_conversion_date'];
    }

    /**
     * Sets most_recent_conversion_date
     *
     * @param string|null $most_recent_conversion_date <div lang=\"ja\"> コンバージョンが発生した直近の日付です。<br> ※YYYYMMDD形式です。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。 </div> <div lang=\"en\"> The date of the most recent conversion.<br> ∗ Format: YYYYMMDD.<br> Although this field will be returned in the response, it will be ignored on input. </div>
     *
     * @return self
     */
    public function setMostRecentConversionDate($most_recent_conversion_date)
    {
        $this->container['most_recent_conversion_date'] = $most_recent_conversion_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \YahooAdsDisplayApi\Client\Model\ConversionTrackerServiceStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \YahooAdsDisplayApi\Client\Model\ConversionTrackerServiceStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets user_revenue_value
     *
     * @return int|null
     */
    public function getUserRevenueValue()
    {
        return $this->container['user_revenue_value'];
    }

    /**
     * Sets user_revenue_value
     *
     * @param int|null $user_revenue_value <div lang=\"ja\"> コンバージョンの収益値です。<br> このフィールドは、リクエストの場合は省略可能です。ADD時のデフォルト設定値は0となります。 </div> <div lang=\"en\"> Revenue value for Conversions.<br> This field is optional in requests. The default value in ADD operation will be 0. </div>
     *
     * @return self
     */
    public function setUserRevenueValue($user_revenue_value)
    {
        $this->container['user_revenue_value'] = $user_revenue_value;

        return $this;
    }

    /**
     * Gets web_conversion
     *
     * @return \YahooAdsDisplayApi\Client\Model\ConversionTrackerServiceWebConversion|null
     */
    public function getWebConversion()
    {
        return $this->container['web_conversion'];
    }

    /**
     * Sets web_conversion
     *
     * @param \YahooAdsDisplayApi\Client\Model\ConversionTrackerServiceWebConversion|null $web_conversion web_conversion
     *
     * @return self
     */
    public function setWebConversion($web_conversion)
    {
        $this->container['web_conversion'] = $web_conversion;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


