<?php
/**
 * AdGroupAdServiceSelector
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  YahooAdsDisplayApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference
 *
 * <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v4/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>
 *
 * The version of the OpenAPI document: v4
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace YahooAdsDisplayApi\Client\Model;

use \ArrayAccess;
use \YahooAdsDisplayApi\Client\ObjectSerializer;

/**
 * AdGroupAdServiceSelector Class Doc Comment
 *
 * @category Class
 * @description &lt;div lang&#x3D;\&quot;ja\&quot;&gt;AdGroupAdServiceSelectorオブジェクトは、操作の対象とする広告およびフィルタ条件を表します。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;The AdGroupAdServiceSelector object is a container for storing ad information and filtering condition.&lt;/div&gt;
 * @package  YahooAdsDisplayApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class AdGroupAdServiceSelector implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AdGroupAdServiceSelector';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'int',
        'ad_group_ids' => 'int[]',
        'ad_ids' => 'int[]',
        'approval_statuses' => '\YahooAdsDisplayApi\Client\Model\AdGroupAdServiceApprovalStatus[]',
        'campaign_goal_filter_type' => '\YahooAdsDisplayApi\Client\Model\AdGroupAdServiceCampaignGoalFilterType',
        'campaign_ids' => 'int[]',
        'contains_label_id_flg' => 'bool',
        'label_ids' => 'int[]',
        'media_ids' => 'int[]',
        'number_results' => 'int',
        'start_index' => 'int',
        'user_statuses' => '\YahooAdsDisplayApi\Client\Model\AdGroupAdServiceUserStatus[]',
        'created_date_range' => '\YahooAdsDisplayApi\Client\Model\AdGroupAdServiceCreatedDateRange'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => 'int64',
        'ad_group_ids' => 'int64',
        'ad_ids' => 'int64',
        'approval_statuses' => null,
        'campaign_goal_filter_type' => null,
        'campaign_ids' => 'int64',
        'contains_label_id_flg' => null,
        'label_ids' => 'int64',
        'media_ids' => 'int64',
        'number_results' => 'int32',
        'start_index' => 'int32',
        'user_statuses' => null,
        'created_date_range' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'ad_group_ids' => 'adGroupIds',
        'ad_ids' => 'adIds',
        'approval_statuses' => 'approvalStatuses',
        'campaign_goal_filter_type' => 'campaignGoalFilterType',
        'campaign_ids' => 'campaignIds',
        'contains_label_id_flg' => 'containsLabelIdFlg',
        'label_ids' => 'labelIds',
        'media_ids' => 'mediaIds',
        'number_results' => 'numberResults',
        'start_index' => 'startIndex',
        'user_statuses' => 'userStatuses',
        'created_date_range' => 'createdDateRange'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'ad_group_ids' => 'setAdGroupIds',
        'ad_ids' => 'setAdIds',
        'approval_statuses' => 'setApprovalStatuses',
        'campaign_goal_filter_type' => 'setCampaignGoalFilterType',
        'campaign_ids' => 'setCampaignIds',
        'contains_label_id_flg' => 'setContainsLabelIdFlg',
        'label_ids' => 'setLabelIds',
        'media_ids' => 'setMediaIds',
        'number_results' => 'setNumberResults',
        'start_index' => 'setStartIndex',
        'user_statuses' => 'setUserStatuses',
        'created_date_range' => 'setCreatedDateRange'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'ad_group_ids' => 'getAdGroupIds',
        'ad_ids' => 'getAdIds',
        'approval_statuses' => 'getApprovalStatuses',
        'campaign_goal_filter_type' => 'getCampaignGoalFilterType',
        'campaign_ids' => 'getCampaignIds',
        'contains_label_id_flg' => 'getContainsLabelIdFlg',
        'label_ids' => 'getLabelIds',
        'media_ids' => 'getMediaIds',
        'number_results' => 'getNumberResults',
        'start_index' => 'getStartIndex',
        'user_statuses' => 'getUserStatuses',
        'created_date_range' => 'getCreatedDateRange'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['ad_group_ids'] = $data['ad_group_ids'] ?? null;
        $this->container['ad_ids'] = $data['ad_ids'] ?? null;
        $this->container['approval_statuses'] = $data['approval_statuses'] ?? null;
        $this->container['campaign_goal_filter_type'] = $data['campaign_goal_filter_type'] ?? null;
        $this->container['campaign_ids'] = $data['campaign_ids'] ?? null;
        $this->container['contains_label_id_flg'] = $data['contains_label_id_flg'] ?? null;
        $this->container['label_ids'] = $data['label_ids'] ?? null;
        $this->container['media_ids'] = $data['media_ids'] ?? null;
        $this->container['number_results'] = $data['number_results'] ?? 500;
        $this->container['start_index'] = $data['start_index'] ?? 1;
        $this->container['user_statuses'] = $data['user_statuses'] ?? null;
        $this->container['created_date_range'] = $data['created_date_range'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if (!is_null($this->container['ad_group_ids']) && (count($this->container['ad_group_ids']) > 500)) {
            $invalidProperties[] = "invalid value for 'ad_group_ids', number of items must be less than or equal to 500.";
        }

        if (!is_null($this->container['ad_ids']) && (count($this->container['ad_ids']) > 500)) {
            $invalidProperties[] = "invalid value for 'ad_ids', number of items must be less than or equal to 500.";
        }

        if (!is_null($this->container['approval_statuses']) && (count($this->container['approval_statuses']) > 5)) {
            $invalidProperties[] = "invalid value for 'approval_statuses', number of items must be less than or equal to 5.";
        }

        if (!is_null($this->container['campaign_ids']) && (count($this->container['campaign_ids']) > 500)) {
            $invalidProperties[] = "invalid value for 'campaign_ids', number of items must be less than or equal to 500.";
        }

        if (!is_null($this->container['label_ids']) && (count($this->container['label_ids']) > 1000)) {
            $invalidProperties[] = "invalid value for 'label_ids', number of items must be less than or equal to 1000.";
        }

        if (!is_null($this->container['number_results']) && ($this->container['number_results'] > 10000)) {
            $invalidProperties[] = "invalid value for 'number_results', must be smaller than or equal to 10000.";
        }

        if (!is_null($this->container['number_results']) && ($this->container['number_results'] < 1)) {
            $invalidProperties[] = "invalid value for 'number_results', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['start_index']) && ($this->container['start_index'] < 1)) {
            $invalidProperties[] = "invalid value for 'start_index', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['user_statuses']) && (count($this->container['user_statuses']) > 2)) {
            $invalidProperties[] = "invalid value for 'user_statuses', number of items must be less than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id <div lang=\"ja\">検索条件 : アカウント情報</div> <div lang=\"en\">Search Condition: Account information</div>
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets ad_group_ids
     *
     * @return int[]|null
     */
    public function getAdGroupIds()
    {
        return $this->container['ad_group_ids'];
    }

    /**
     * Sets ad_group_ids
     *
     * @param int[]|null $ad_group_ids <div lang=\"ja\">検索条件 : 広告グループID</div> <div lang=\"en\">Search Condition: Ad Group ID</div>
     *
     * @return self
     */
    public function setAdGroupIds($ad_group_ids)
    {

        if (!is_null($ad_group_ids) && (count($ad_group_ids) > 500)) {
            throw new \InvalidArgumentException('invalid value for $ad_group_ids when calling AdGroupAdServiceSelector., number of items must be less than or equal to 500.');
        }
        $this->container['ad_group_ids'] = $ad_group_ids;

        return $this;
    }

    /**
     * Gets ad_ids
     *
     * @return int[]|null
     */
    public function getAdIds()
    {
        return $this->container['ad_ids'];
    }

    /**
     * Sets ad_ids
     *
     * @param int[]|null $ad_ids <div lang=\"ja\">検索条件 : 広告ID</div> <div lang=\"en\">Search Condition: Ad ID</div>
     *
     * @return self
     */
    public function setAdIds($ad_ids)
    {

        if (!is_null($ad_ids) && (count($ad_ids) > 500)) {
            throw new \InvalidArgumentException('invalid value for $ad_ids when calling AdGroupAdServiceSelector., number of items must be less than or equal to 500.');
        }
        $this->container['ad_ids'] = $ad_ids;

        return $this;
    }

    /**
     * Gets approval_statuses
     *
     * @return \YahooAdsDisplayApi\Client\Model\AdGroupAdServiceApprovalStatus[]|null
     */
    public function getApprovalStatuses()
    {
        return $this->container['approval_statuses'];
    }

    /**
     * Sets approval_statuses
     *
     * @param \YahooAdsDisplayApi\Client\Model\AdGroupAdServiceApprovalStatus[]|null $approval_statuses approval_statuses
     *
     * @return self
     */
    public function setApprovalStatuses($approval_statuses)
    {

        if (!is_null($approval_statuses) && (count($approval_statuses) > 5)) {
            throw new \InvalidArgumentException('invalid value for $approval_statuses when calling AdGroupAdServiceSelector., number of items must be less than or equal to 5.');
        }
        $this->container['approval_statuses'] = $approval_statuses;

        return $this;
    }

    /**
     * Gets campaign_goal_filter_type
     *
     * @return \YahooAdsDisplayApi\Client\Model\AdGroupAdServiceCampaignGoalFilterType|null
     */
    public function getCampaignGoalFilterType()
    {
        return $this->container['campaign_goal_filter_type'];
    }

    /**
     * Sets campaign_goal_filter_type
     *
     * @param \YahooAdsDisplayApi\Client\Model\AdGroupAdServiceCampaignGoalFilterType|null $campaign_goal_filter_type campaign_goal_filter_type
     *
     * @return self
     */
    public function setCampaignGoalFilterType($campaign_goal_filter_type)
    {
        $this->container['campaign_goal_filter_type'] = $campaign_goal_filter_type;

        return $this;
    }

    /**
     * Gets campaign_ids
     *
     * @return int[]|null
     */
    public function getCampaignIds()
    {
        return $this->container['campaign_ids'];
    }

    /**
     * Sets campaign_ids
     *
     * @param int[]|null $campaign_ids <div lang=\"ja\">検索条件 : キャンペーンID</div> <div lang=\"en\">Search Condition: Campaign ID</div>
     *
     * @return self
     */
    public function setCampaignIds($campaign_ids)
    {

        if (!is_null($campaign_ids) && (count($campaign_ids) > 500)) {
            throw new \InvalidArgumentException('invalid value for $campaign_ids when calling AdGroupAdServiceSelector., number of items must be less than or equal to 500.');
        }
        $this->container['campaign_ids'] = $campaign_ids;

        return $this;
    }

    /**
     * Gets contains_label_id_flg
     *
     * @return bool|null
     */
    public function getContainsLabelIdFlg()
    {
        return $this->container['contains_label_id_flg'];
    }

    /**
     * Sets contains_label_id_flg
     *
     * @param bool|null $contains_label_id_flg <div lang=\"ja\">ラベルID取得フラグ</div> <div lang=\"en\">Flag of contains label ID</div>
     *
     * @return self
     */
    public function setContainsLabelIdFlg($contains_label_id_flg)
    {
        $this->container['contains_label_id_flg'] = $contains_label_id_flg;

        return $this;
    }

    /**
     * Gets label_ids
     *
     * @return int[]|null
     */
    public function getLabelIds()
    {
        return $this->container['label_ids'];
    }

    /**
     * Sets label_ids
     *
     * @param int[]|null $label_ids <div lang=\"ja\">検索条件 : ラベルID</div> <div lang=\"en\">Search Condition: Label ID</div>
     *
     * @return self
     */
    public function setLabelIds($label_ids)
    {

        if (!is_null($label_ids) && (count($label_ids) > 1000)) {
            throw new \InvalidArgumentException('invalid value for $label_ids when calling AdGroupAdServiceSelector., number of items must be less than or equal to 1000.');
        }
        $this->container['label_ids'] = $label_ids;

        return $this;
    }

    /**
     * Gets media_ids
     *
     * @return int[]|null
     */
    public function getMediaIds()
    {
        return $this->container['media_ids'];
    }

    /**
     * Sets media_ids
     *
     * @param int[]|null $media_ids <div lang=\"ja\">検索条件 : 画像ID</div> <div lang=\"en\">Search Condition: Media ID</div>
     *
     * @return self
     */
    public function setMediaIds($media_ids)
    {
        $this->container['media_ids'] = $media_ids;

        return $this;
    }

    /**
     * Gets number_results
     *
     * @return int|null
     */
    public function getNumberResults()
    {
        return $this->container['number_results'];
    }

    /**
     * Sets number_results
     *
     * @param int|null $number_results <div lang=\"ja\">ページの最大件数です。このフィールドは、1以上を指定する必要があります。</div> <div lang=\"en\">Maximum number of results to return in this page. This field must be greater than or equal to 1. Also see Entity Limits per operation.</div>
     *
     * @return self
     */
    public function setNumberResults($number_results)
    {

        if (!is_null($number_results) && ($number_results > 10000)) {
            throw new \InvalidArgumentException('invalid value for $number_results when calling AdGroupAdServiceSelector., must be smaller than or equal to 10000.');
        }
        if (!is_null($number_results) && ($number_results < 1)) {
            throw new \InvalidArgumentException('invalid value for $number_results when calling AdGroupAdServiceSelector., must be bigger than or equal to 1.');
        }

        $this->container['number_results'] = $number_results;

        return $this;
    }

    /**
     * Gets start_index
     *
     * @return int|null
     */
    public function getStartIndex()
    {
        return $this->container['start_index'];
    }

    /**
     * Sets start_index
     *
     * @param int|null $start_index <div lang=\"ja\">ページの先頭のインデックスです。このフィールドは、1以上を指定する必要があります。</div> <div lang=\"en\">Index of the first result to return in this page. This field must be greater than or equal to 1.</div>
     *
     * @return self
     */
    public function setStartIndex($start_index)
    {

        if (!is_null($start_index) && ($start_index < 1)) {
            throw new \InvalidArgumentException('invalid value for $start_index when calling AdGroupAdServiceSelector., must be bigger than or equal to 1.');
        }

        $this->container['start_index'] = $start_index;

        return $this;
    }

    /**
     * Gets user_statuses
     *
     * @return \YahooAdsDisplayApi\Client\Model\AdGroupAdServiceUserStatus[]|null
     */
    public function getUserStatuses()
    {
        return $this->container['user_statuses'];
    }

    /**
     * Sets user_statuses
     *
     * @param \YahooAdsDisplayApi\Client\Model\AdGroupAdServiceUserStatus[]|null $user_statuses user_statuses
     *
     * @return self
     */
    public function setUserStatuses($user_statuses)
    {

        if (!is_null($user_statuses) && (count($user_statuses) > 2)) {
            throw new \InvalidArgumentException('invalid value for $user_statuses when calling AdGroupAdServiceSelector., number of items must be less than or equal to 2.');
        }
        $this->container['user_statuses'] = $user_statuses;

        return $this;
    }

    /**
     * Gets created_date_range
     *
     * @return \YahooAdsDisplayApi\Client\Model\AdGroupAdServiceCreatedDateRange|null
     */
    public function getCreatedDateRange()
    {
        return $this->container['created_date_range'];
    }

    /**
     * Sets created_date_range
     *
     * @param \YahooAdsDisplayApi\Client\Model\AdGroupAdServiceCreatedDateRange|null $created_date_range created_date_range
     *
     * @return self
     */
    public function setCreatedDateRange($created_date_range)
    {
        $this->container['created_date_range'] = $created_date_range;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


