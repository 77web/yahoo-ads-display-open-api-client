<?php
/**
 * AdGroupServiceConversionOptimizer
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  YahooAdsDisplayApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference
 *
 * <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v4/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>
 *
 * The version of the OpenAPI document: v4
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace YahooAdsDisplayApi\Client\Model;

use \ArrayAccess;
use \YahooAdsDisplayApi\Client\ObjectSerializer;

/**
 * AdGroupServiceConversionOptimizer Class Doc Comment
 *
 * @category Class
 * @description &lt;div lang&#x3D;\&quot;ja\&quot;&gt; AdGroupServiceConversionOptimizerは、コンバージョン最適化制御を保持するオブジェクトです。&lt;br&gt; ADD、SETのどちらも指定できません。ADD時、MANUAL固定となります。 &lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt; AdGroupServiceConversionOptimizer retains conversion optimization control.&lt;br&gt; Not allowed for ADD and SET. In ADD operation, it is set to \&quot;MANUAL\&quot;. &lt;/div&gt;
 * @package  YahooAdsDisplayApi\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class AdGroupServiceConversionOptimizer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AdGroupServiceConversionOptimizer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'auto_conversion_optimizer' => '\YahooAdsDisplayApi\Client\Model\AdGroupServiceAutoConversionOptimizer',
        'manual_conversion_optimizer' => '\YahooAdsDisplayApi\Client\Model\AdGroupServiceManualConversionOptimizer',
        'none_conversion_optimizer' => '\YahooAdsDisplayApi\Client\Model\AdGroupServiceNoneConversionOptimizer',
        'optimizer_type' => '\YahooAdsDisplayApi\Client\Model\AdGroupServiceOptimizerType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'auto_conversion_optimizer' => null,
        'manual_conversion_optimizer' => null,
        'none_conversion_optimizer' => null,
        'optimizer_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_conversion_optimizer' => 'autoConversionOptimizer',
        'manual_conversion_optimizer' => 'manualConversionOptimizer',
        'none_conversion_optimizer' => 'noneConversionOptimizer',
        'optimizer_type' => 'optimizerType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_conversion_optimizer' => 'setAutoConversionOptimizer',
        'manual_conversion_optimizer' => 'setManualConversionOptimizer',
        'none_conversion_optimizer' => 'setNoneConversionOptimizer',
        'optimizer_type' => 'setOptimizerType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_conversion_optimizer' => 'getAutoConversionOptimizer',
        'manual_conversion_optimizer' => 'getManualConversionOptimizer',
        'none_conversion_optimizer' => 'getNoneConversionOptimizer',
        'optimizer_type' => 'getOptimizerType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_conversion_optimizer'] = $data['auto_conversion_optimizer'] ?? null;
        $this->container['manual_conversion_optimizer'] = $data['manual_conversion_optimizer'] ?? null;
        $this->container['none_conversion_optimizer'] = $data['none_conversion_optimizer'] ?? null;
        $this->container['optimizer_type'] = $data['optimizer_type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_conversion_optimizer
     *
     * @return \YahooAdsDisplayApi\Client\Model\AdGroupServiceAutoConversionOptimizer|null
     */
    public function getAutoConversionOptimizer()
    {
        return $this->container['auto_conversion_optimizer'];
    }

    /**
     * Sets auto_conversion_optimizer
     *
     * @param \YahooAdsDisplayApi\Client\Model\AdGroupServiceAutoConversionOptimizer|null $auto_conversion_optimizer auto_conversion_optimizer
     *
     * @return self
     */
    public function setAutoConversionOptimizer($auto_conversion_optimizer)
    {
        $this->container['auto_conversion_optimizer'] = $auto_conversion_optimizer;

        return $this;
    }

    /**
     * Gets manual_conversion_optimizer
     *
     * @return \YahooAdsDisplayApi\Client\Model\AdGroupServiceManualConversionOptimizer|null
     */
    public function getManualConversionOptimizer()
    {
        return $this->container['manual_conversion_optimizer'];
    }

    /**
     * Sets manual_conversion_optimizer
     *
     * @param \YahooAdsDisplayApi\Client\Model\AdGroupServiceManualConversionOptimizer|null $manual_conversion_optimizer manual_conversion_optimizer
     *
     * @return self
     */
    public function setManualConversionOptimizer($manual_conversion_optimizer)
    {
        $this->container['manual_conversion_optimizer'] = $manual_conversion_optimizer;

        return $this;
    }

    /**
     * Gets none_conversion_optimizer
     *
     * @return \YahooAdsDisplayApi\Client\Model\AdGroupServiceNoneConversionOptimizer|null
     */
    public function getNoneConversionOptimizer()
    {
        return $this->container['none_conversion_optimizer'];
    }

    /**
     * Sets none_conversion_optimizer
     *
     * @param \YahooAdsDisplayApi\Client\Model\AdGroupServiceNoneConversionOptimizer|null $none_conversion_optimizer none_conversion_optimizer
     *
     * @return self
     */
    public function setNoneConversionOptimizer($none_conversion_optimizer)
    {
        $this->container['none_conversion_optimizer'] = $none_conversion_optimizer;

        return $this;
    }

    /**
     * Gets optimizer_type
     *
     * @return \YahooAdsDisplayApi\Client\Model\AdGroupServiceOptimizerType|null
     */
    public function getOptimizerType()
    {
        return $this->container['optimizer_type'];
    }

    /**
     * Sets optimizer_type
     *
     * @param \YahooAdsDisplayApi\Client\Model\AdGroupServiceOptimizerType|null $optimizer_type optimizer_type
     *
     * @return self
     */
    public function setOptimizerType($optimizer_type)
    {
        $this->container['optimizer_type'] = $optimizer_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


