<?php
/**
 * RetargetingListServiceApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference
 *
 * <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v4/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>
 *
 * The version of the OpenAPI document: v4
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * RetargetingListServiceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RetargetingListServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation retargetingListServiceAddPost
     *
     * @param  \OpenAPI\Client\Model\RetargetingListServiceOperation $retargeting_list_service_operation retargeting_list_service_operation (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return |\OpenAPI\Client\Model\RetargetingListServiceMutateResponse
     */
    public function retargetingListServiceAddPost($retargeting_list_service_operation = null)
    {
        list($response) = $this->retargetingListServiceAddPostWithHttpInfo($retargeting_list_service_operation);
        return $response;
    }

    /**
     * Operation retargetingListServiceAddPostWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\RetargetingListServiceOperation $retargeting_list_service_operation (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of |\OpenAPI\Client\Model\RetargetingListServiceMutateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retargetingListServiceAddPostWithHttpInfo($retargeting_list_service_operation = null)
    {
        $request = $this->retargetingListServiceAddPostRequest($retargeting_list_service_operation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RetargetingListServiceMutateResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RetargetingListServiceMutateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RetargetingListServiceMutateResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RetargetingListServiceMutateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retargetingListServiceAddPostAsync
     *
     * 
     *
     * @param  \OpenAPI\Client\Model\RetargetingListServiceOperation $retargeting_list_service_operation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retargetingListServiceAddPostAsync($retargeting_list_service_operation = null)
    {
        return $this->retargetingListServiceAddPostAsyncWithHttpInfo($retargeting_list_service_operation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retargetingListServiceAddPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  \OpenAPI\Client\Model\RetargetingListServiceOperation $retargeting_list_service_operation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retargetingListServiceAddPostAsyncWithHttpInfo($retargeting_list_service_operation = null)
    {
        $returnType = '\OpenAPI\Client\Model\RetargetingListServiceMutateResponse';
        $request = $this->retargetingListServiceAddPostRequest($retargeting_list_service_operation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retargetingListServiceAddPost'
     *
     * @param  \OpenAPI\Client\Model\RetargetingListServiceOperation $retargeting_list_service_operation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retargetingListServiceAddPostRequest($retargeting_list_service_operation = null)
    {

        $resourcePath = '/RetargetingListService/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($retargeting_list_service_operation)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($retargeting_list_service_operation));
            } else {
                $httpBody = $retargeting_list_service_operation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retargetingListServiceGetPost
     *
     * @param  \OpenAPI\Client\Model\RetargetingListServiceSelector $retargeting_list_service_selector retargeting_list_service_selector (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return |\OpenAPI\Client\Model\RetargetingListServiceGetResponse
     */
    public function retargetingListServiceGetPost($retargeting_list_service_selector = null)
    {
        list($response) = $this->retargetingListServiceGetPostWithHttpInfo($retargeting_list_service_selector);
        return $response;
    }

    /**
     * Operation retargetingListServiceGetPostWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\RetargetingListServiceSelector $retargeting_list_service_selector (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of |\OpenAPI\Client\Model\RetargetingListServiceGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retargetingListServiceGetPostWithHttpInfo($retargeting_list_service_selector = null)
    {
        $request = $this->retargetingListServiceGetPostRequest($retargeting_list_service_selector);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RetargetingListServiceGetResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RetargetingListServiceGetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RetargetingListServiceGetResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RetargetingListServiceGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retargetingListServiceGetPostAsync
     *
     * 
     *
     * @param  \OpenAPI\Client\Model\RetargetingListServiceSelector $retargeting_list_service_selector (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retargetingListServiceGetPostAsync($retargeting_list_service_selector = null)
    {
        return $this->retargetingListServiceGetPostAsyncWithHttpInfo($retargeting_list_service_selector)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retargetingListServiceGetPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  \OpenAPI\Client\Model\RetargetingListServiceSelector $retargeting_list_service_selector (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retargetingListServiceGetPostAsyncWithHttpInfo($retargeting_list_service_selector = null)
    {
        $returnType = '\OpenAPI\Client\Model\RetargetingListServiceGetResponse';
        $request = $this->retargetingListServiceGetPostRequest($retargeting_list_service_selector);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retargetingListServiceGetPost'
     *
     * @param  \OpenAPI\Client\Model\RetargetingListServiceSelector $retargeting_list_service_selector (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retargetingListServiceGetPostRequest($retargeting_list_service_selector = null)
    {

        $resourcePath = '/RetargetingListService/get';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($retargeting_list_service_selector)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($retargeting_list_service_selector));
            } else {
                $httpBody = $retargeting_list_service_selector;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retargetingListServiceGetUploadUserListStatusPost
     *
     * @param  \OpenAPI\Client\Model\RetargetingListServiceUploadUserListStatusSelector $retargeting_list_service_upload_user_list_status_selector retargeting_list_service_upload_user_list_status_selector (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return |\OpenAPI\Client\Model\RetargetingListServiceGetUploadUserListResponse
     */
    public function retargetingListServiceGetUploadUserListStatusPost($retargeting_list_service_upload_user_list_status_selector = null)
    {
        list($response) = $this->retargetingListServiceGetUploadUserListStatusPostWithHttpInfo($retargeting_list_service_upload_user_list_status_selector);
        return $response;
    }

    /**
     * Operation retargetingListServiceGetUploadUserListStatusPostWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\RetargetingListServiceUploadUserListStatusSelector $retargeting_list_service_upload_user_list_status_selector (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of |\OpenAPI\Client\Model\RetargetingListServiceGetUploadUserListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retargetingListServiceGetUploadUserListStatusPostWithHttpInfo($retargeting_list_service_upload_user_list_status_selector = null)
    {
        $request = $this->retargetingListServiceGetUploadUserListStatusPostRequest($retargeting_list_service_upload_user_list_status_selector);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RetargetingListServiceGetUploadUserListResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RetargetingListServiceGetUploadUserListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RetargetingListServiceGetUploadUserListResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RetargetingListServiceGetUploadUserListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retargetingListServiceGetUploadUserListStatusPostAsync
     *
     * 
     *
     * @param  \OpenAPI\Client\Model\RetargetingListServiceUploadUserListStatusSelector $retargeting_list_service_upload_user_list_status_selector (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retargetingListServiceGetUploadUserListStatusPostAsync($retargeting_list_service_upload_user_list_status_selector = null)
    {
        return $this->retargetingListServiceGetUploadUserListStatusPostAsyncWithHttpInfo($retargeting_list_service_upload_user_list_status_selector)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retargetingListServiceGetUploadUserListStatusPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  \OpenAPI\Client\Model\RetargetingListServiceUploadUserListStatusSelector $retargeting_list_service_upload_user_list_status_selector (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retargetingListServiceGetUploadUserListStatusPostAsyncWithHttpInfo($retargeting_list_service_upload_user_list_status_selector = null)
    {
        $returnType = '\OpenAPI\Client\Model\RetargetingListServiceGetUploadUserListResponse';
        $request = $this->retargetingListServiceGetUploadUserListStatusPostRequest($retargeting_list_service_upload_user_list_status_selector);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retargetingListServiceGetUploadUserListStatusPost'
     *
     * @param  \OpenAPI\Client\Model\RetargetingListServiceUploadUserListStatusSelector $retargeting_list_service_upload_user_list_status_selector (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retargetingListServiceGetUploadUserListStatusPostRequest($retargeting_list_service_upload_user_list_status_selector = null)
    {

        $resourcePath = '/RetargetingListService/getUploadUserListStatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($retargeting_list_service_upload_user_list_status_selector)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($retargeting_list_service_upload_user_list_status_selector));
            } else {
                $httpBody = $retargeting_list_service_upload_user_list_status_selector;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retargetingListServiceRemovePost
     *
     * @param  \OpenAPI\Client\Model\RetargetingListServiceOperation $retargeting_list_service_operation retargeting_list_service_operation (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return |\OpenAPI\Client\Model\RetargetingListServiceMutateResponse
     */
    public function retargetingListServiceRemovePost($retargeting_list_service_operation = null)
    {
        list($response) = $this->retargetingListServiceRemovePostWithHttpInfo($retargeting_list_service_operation);
        return $response;
    }

    /**
     * Operation retargetingListServiceRemovePostWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\RetargetingListServiceOperation $retargeting_list_service_operation (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of |\OpenAPI\Client\Model\RetargetingListServiceMutateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retargetingListServiceRemovePostWithHttpInfo($retargeting_list_service_operation = null)
    {
        $request = $this->retargetingListServiceRemovePostRequest($retargeting_list_service_operation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RetargetingListServiceMutateResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RetargetingListServiceMutateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RetargetingListServiceMutateResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RetargetingListServiceMutateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retargetingListServiceRemovePostAsync
     *
     * 
     *
     * @param  \OpenAPI\Client\Model\RetargetingListServiceOperation $retargeting_list_service_operation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retargetingListServiceRemovePostAsync($retargeting_list_service_operation = null)
    {
        return $this->retargetingListServiceRemovePostAsyncWithHttpInfo($retargeting_list_service_operation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retargetingListServiceRemovePostAsyncWithHttpInfo
     *
     * 
     *
     * @param  \OpenAPI\Client\Model\RetargetingListServiceOperation $retargeting_list_service_operation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retargetingListServiceRemovePostAsyncWithHttpInfo($retargeting_list_service_operation = null)
    {
        $returnType = '\OpenAPI\Client\Model\RetargetingListServiceMutateResponse';
        $request = $this->retargetingListServiceRemovePostRequest($retargeting_list_service_operation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retargetingListServiceRemovePost'
     *
     * @param  \OpenAPI\Client\Model\RetargetingListServiceOperation $retargeting_list_service_operation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retargetingListServiceRemovePostRequest($retargeting_list_service_operation = null)
    {

        $resourcePath = '/RetargetingListService/remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($retargeting_list_service_operation)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($retargeting_list_service_operation));
            } else {
                $httpBody = $retargeting_list_service_operation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retargetingListServiceSetPost
     *
     * @param  \OpenAPI\Client\Model\RetargetingListServiceOperation $retargeting_list_service_operation retargeting_list_service_operation (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return |\OpenAPI\Client\Model\RetargetingListServiceMutateResponse
     */
    public function retargetingListServiceSetPost($retargeting_list_service_operation = null)
    {
        list($response) = $this->retargetingListServiceSetPostWithHttpInfo($retargeting_list_service_operation);
        return $response;
    }

    /**
     * Operation retargetingListServiceSetPostWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\RetargetingListServiceOperation $retargeting_list_service_operation (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of |\OpenAPI\Client\Model\RetargetingListServiceMutateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retargetingListServiceSetPostWithHttpInfo($retargeting_list_service_operation = null)
    {
        $request = $this->retargetingListServiceSetPostRequest($retargeting_list_service_operation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RetargetingListServiceMutateResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RetargetingListServiceMutateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RetargetingListServiceMutateResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RetargetingListServiceMutateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retargetingListServiceSetPostAsync
     *
     * 
     *
     * @param  \OpenAPI\Client\Model\RetargetingListServiceOperation $retargeting_list_service_operation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retargetingListServiceSetPostAsync($retargeting_list_service_operation = null)
    {
        return $this->retargetingListServiceSetPostAsyncWithHttpInfo($retargeting_list_service_operation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retargetingListServiceSetPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  \OpenAPI\Client\Model\RetargetingListServiceOperation $retargeting_list_service_operation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retargetingListServiceSetPostAsyncWithHttpInfo($retargeting_list_service_operation = null)
    {
        $returnType = '\OpenAPI\Client\Model\RetargetingListServiceMutateResponse';
        $request = $this->retargetingListServiceSetPostRequest($retargeting_list_service_operation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retargetingListServiceSetPost'
     *
     * @param  \OpenAPI\Client\Model\RetargetingListServiceOperation $retargeting_list_service_operation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retargetingListServiceSetPostRequest($retargeting_list_service_operation = null)
    {

        $resourcePath = '/RetargetingListService/set';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($retargeting_list_service_operation)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($retargeting_list_service_operation));
            } else {
                $httpBody = $retargeting_list_service_operation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retargetingListServiceUploadUserListPost
     *
     * @param  int $account_id &lt;div lang&#x3D;\&quot;ja\&quot;&gt;アカウントIDです。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;Account ID.&lt;/div&gt; (required)
     * @param  string $retargeting_tag_id &lt;div lang&#x3D;\&quot;ja\&quot;&gt;サイトリターゲティングのタグIDです。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;Tag ID for site retargeting.&lt;/div&gt; (required)
     * @param  int $target_list_id &lt;div lang&#x3D;\&quot;ja\&quot;&gt;カスタムオーディエンスのターゲットリストIDです。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;Target list ID for the custom audience.&lt;/div&gt; (required)
     * @param  \OpenAPI\Client\Model\RetargetingListServiceUploadUserListUploadType $upload_type &lt;div lang&#x3D;\&quot;ja\&quot;&gt;   RetargetingListServiceUploadUserListUploadTypeは、アップロードする方法の種類を表します。&lt;br&gt;   ハッシュ化メールアドレスの詳細については、&lt;a href&#x3D;\&quot;https://ads-help.yahoo.co.jp/yahooads/display/articledetail?lan&#x3D;ja&amp;aid&#x3D;69234\&quot;&gt;ヘルプ&lt;/a&gt;をご参照ください。 &lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;   RetargetingListServiceUploadUserListUploadType displays kind of upload method.&lt;br&gt;   Refer to &lt;a href&#x3D;\&quot;https://ads-help.yahoo.co.jp/yahooads/display/articledetail?lan&#x3D;en&amp;aid&#x3D;37704\&quot;&gt;Help page&lt;/a&gt; for more details about hashed Email Address. &lt;/div&gt; &lt;/div&gt; &lt;dl class&#x3D;term&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;IDFA&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;iOS端末用広告識別子です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Ad identifier for iOS devices.&lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;AAID&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;Android端末用広告識別子です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Ad identifier for Android devices.&lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;MAIL_ADDRESS&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;ハッシュ化メールアドレスです。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Hashed email address.&lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;UNKNOWN&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;未知の値です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Unknown Value&lt;/span&gt;&lt;/dd&gt; &lt;/dl&gt; (required)
     * @param  \OpenAPI\Client\Model\RetargetingListServiceUploadUserListCompressType $compress_type &lt;div lang&#x3D;\&quot;ja\&quot;&gt;RetargetingListServiceUploadUserListCompressTypeは、アップロードするファイルの圧縮形式を表します。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;RetargetingListServiceUploadUserListCompressType displays kind of compress type of upload file.&lt;/div&gt; &lt;dl class&#x3D;term&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;NONE&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;非圧縮形式です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Uncompressed format.&lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;ZIP&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;ZIP形式です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;ZIP format. &lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;GZIP&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;GZIP形式です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;GZIP format.&lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;UNKNOWN&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;未知の値です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Unknown Value&lt;/span&gt;&lt;/dd&gt; &lt;/dl&gt; (required)
     * @param  string $custom_user_id &lt;div lang&#x3D;\&quot;ja\&quot;&gt;   customUserIdの指定は、一部の利用者向けの限定機能となります。 &lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;   Specifying customUserId is a limited function for some users. &lt;/div&gt; (optional)
     * @param  \SplFileObject $body body (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return |\OpenAPI\Client\Model\RetargetingListServiceUploadUserListResponse
     */
    public function retargetingListServiceUploadUserListPost($account_id, $retargeting_tag_id, $target_list_id, $upload_type, $compress_type, $custom_user_id = null, $body = null)
    {
        list($response) = $this->retargetingListServiceUploadUserListPostWithHttpInfo($account_id, $retargeting_tag_id, $target_list_id, $upload_type, $compress_type, $custom_user_id, $body);
        return $response;
    }

    /**
     * Operation retargetingListServiceUploadUserListPostWithHttpInfo
     *
     * @param  int $account_id &lt;div lang&#x3D;\&quot;ja\&quot;&gt;アカウントIDです。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;Account ID.&lt;/div&gt; (required)
     * @param  string $retargeting_tag_id &lt;div lang&#x3D;\&quot;ja\&quot;&gt;サイトリターゲティングのタグIDです。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;Tag ID for site retargeting.&lt;/div&gt; (required)
     * @param  int $target_list_id &lt;div lang&#x3D;\&quot;ja\&quot;&gt;カスタムオーディエンスのターゲットリストIDです。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;Target list ID for the custom audience.&lt;/div&gt; (required)
     * @param  \OpenAPI\Client\Model\RetargetingListServiceUploadUserListUploadType $upload_type &lt;div lang&#x3D;\&quot;ja\&quot;&gt;   RetargetingListServiceUploadUserListUploadTypeは、アップロードする方法の種類を表します。&lt;br&gt;   ハッシュ化メールアドレスの詳細については、&lt;a href&#x3D;\&quot;https://ads-help.yahoo.co.jp/yahooads/display/articledetail?lan&#x3D;ja&amp;aid&#x3D;69234\&quot;&gt;ヘルプ&lt;/a&gt;をご参照ください。 &lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;   RetargetingListServiceUploadUserListUploadType displays kind of upload method.&lt;br&gt;   Refer to &lt;a href&#x3D;\&quot;https://ads-help.yahoo.co.jp/yahooads/display/articledetail?lan&#x3D;en&amp;aid&#x3D;37704\&quot;&gt;Help page&lt;/a&gt; for more details about hashed Email Address. &lt;/div&gt; &lt;/div&gt; &lt;dl class&#x3D;term&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;IDFA&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;iOS端末用広告識別子です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Ad identifier for iOS devices.&lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;AAID&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;Android端末用広告識別子です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Ad identifier for Android devices.&lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;MAIL_ADDRESS&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;ハッシュ化メールアドレスです。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Hashed email address.&lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;UNKNOWN&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;未知の値です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Unknown Value&lt;/span&gt;&lt;/dd&gt; &lt;/dl&gt; (required)
     * @param  \OpenAPI\Client\Model\RetargetingListServiceUploadUserListCompressType $compress_type &lt;div lang&#x3D;\&quot;ja\&quot;&gt;RetargetingListServiceUploadUserListCompressTypeは、アップロードするファイルの圧縮形式を表します。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;RetargetingListServiceUploadUserListCompressType displays kind of compress type of upload file.&lt;/div&gt; &lt;dl class&#x3D;term&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;NONE&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;非圧縮形式です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Uncompressed format.&lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;ZIP&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;ZIP形式です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;ZIP format. &lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;GZIP&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;GZIP形式です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;GZIP format.&lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;UNKNOWN&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;未知の値です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Unknown Value&lt;/span&gt;&lt;/dd&gt; &lt;/dl&gt; (required)
     * @param  string $custom_user_id &lt;div lang&#x3D;\&quot;ja\&quot;&gt;   customUserIdの指定は、一部の利用者向けの限定機能となります。 &lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;   Specifying customUserId is a limited function for some users. &lt;/div&gt; (optional)
     * @param  \SplFileObject $body (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of |\OpenAPI\Client\Model\RetargetingListServiceUploadUserListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retargetingListServiceUploadUserListPostWithHttpInfo($account_id, $retargeting_tag_id, $target_list_id, $upload_type, $compress_type, $custom_user_id = null, $body = null)
    {
        $request = $this->retargetingListServiceUploadUserListPostRequest($account_id, $retargeting_tag_id, $target_list_id, $upload_type, $compress_type, $custom_user_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RetargetingListServiceUploadUserListResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RetargetingListServiceUploadUserListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RetargetingListServiceUploadUserListResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RetargetingListServiceUploadUserListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retargetingListServiceUploadUserListPostAsync
     *
     * 
     *
     * @param  int $account_id &lt;div lang&#x3D;\&quot;ja\&quot;&gt;アカウントIDです。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;Account ID.&lt;/div&gt; (required)
     * @param  string $retargeting_tag_id &lt;div lang&#x3D;\&quot;ja\&quot;&gt;サイトリターゲティングのタグIDです。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;Tag ID for site retargeting.&lt;/div&gt; (required)
     * @param  int $target_list_id &lt;div lang&#x3D;\&quot;ja\&quot;&gt;カスタムオーディエンスのターゲットリストIDです。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;Target list ID for the custom audience.&lt;/div&gt; (required)
     * @param  \OpenAPI\Client\Model\RetargetingListServiceUploadUserListUploadType $upload_type &lt;div lang&#x3D;\&quot;ja\&quot;&gt;   RetargetingListServiceUploadUserListUploadTypeは、アップロードする方法の種類を表します。&lt;br&gt;   ハッシュ化メールアドレスの詳細については、&lt;a href&#x3D;\&quot;https://ads-help.yahoo.co.jp/yahooads/display/articledetail?lan&#x3D;ja&amp;aid&#x3D;69234\&quot;&gt;ヘルプ&lt;/a&gt;をご参照ください。 &lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;   RetargetingListServiceUploadUserListUploadType displays kind of upload method.&lt;br&gt;   Refer to &lt;a href&#x3D;\&quot;https://ads-help.yahoo.co.jp/yahooads/display/articledetail?lan&#x3D;en&amp;aid&#x3D;37704\&quot;&gt;Help page&lt;/a&gt; for more details about hashed Email Address. &lt;/div&gt; &lt;/div&gt; &lt;dl class&#x3D;term&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;IDFA&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;iOS端末用広告識別子です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Ad identifier for iOS devices.&lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;AAID&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;Android端末用広告識別子です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Ad identifier for Android devices.&lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;MAIL_ADDRESS&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;ハッシュ化メールアドレスです。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Hashed email address.&lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;UNKNOWN&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;未知の値です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Unknown Value&lt;/span&gt;&lt;/dd&gt; &lt;/dl&gt; (required)
     * @param  \OpenAPI\Client\Model\RetargetingListServiceUploadUserListCompressType $compress_type &lt;div lang&#x3D;\&quot;ja\&quot;&gt;RetargetingListServiceUploadUserListCompressTypeは、アップロードするファイルの圧縮形式を表します。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;RetargetingListServiceUploadUserListCompressType displays kind of compress type of upload file.&lt;/div&gt; &lt;dl class&#x3D;term&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;NONE&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;非圧縮形式です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Uncompressed format.&lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;ZIP&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;ZIP形式です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;ZIP format. &lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;GZIP&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;GZIP形式です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;GZIP format.&lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;UNKNOWN&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;未知の値です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Unknown Value&lt;/span&gt;&lt;/dd&gt; &lt;/dl&gt; (required)
     * @param  string $custom_user_id &lt;div lang&#x3D;\&quot;ja\&quot;&gt;   customUserIdの指定は、一部の利用者向けの限定機能となります。 &lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;   Specifying customUserId is a limited function for some users. &lt;/div&gt; (optional)
     * @param  \SplFileObject $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retargetingListServiceUploadUserListPostAsync($account_id, $retargeting_tag_id, $target_list_id, $upload_type, $compress_type, $custom_user_id = null, $body = null)
    {
        return $this->retargetingListServiceUploadUserListPostAsyncWithHttpInfo($account_id, $retargeting_tag_id, $target_list_id, $upload_type, $compress_type, $custom_user_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retargetingListServiceUploadUserListPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $account_id &lt;div lang&#x3D;\&quot;ja\&quot;&gt;アカウントIDです。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;Account ID.&lt;/div&gt; (required)
     * @param  string $retargeting_tag_id &lt;div lang&#x3D;\&quot;ja\&quot;&gt;サイトリターゲティングのタグIDです。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;Tag ID for site retargeting.&lt;/div&gt; (required)
     * @param  int $target_list_id &lt;div lang&#x3D;\&quot;ja\&quot;&gt;カスタムオーディエンスのターゲットリストIDです。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;Target list ID for the custom audience.&lt;/div&gt; (required)
     * @param  \OpenAPI\Client\Model\RetargetingListServiceUploadUserListUploadType $upload_type &lt;div lang&#x3D;\&quot;ja\&quot;&gt;   RetargetingListServiceUploadUserListUploadTypeは、アップロードする方法の種類を表します。&lt;br&gt;   ハッシュ化メールアドレスの詳細については、&lt;a href&#x3D;\&quot;https://ads-help.yahoo.co.jp/yahooads/display/articledetail?lan&#x3D;ja&amp;aid&#x3D;69234\&quot;&gt;ヘルプ&lt;/a&gt;をご参照ください。 &lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;   RetargetingListServiceUploadUserListUploadType displays kind of upload method.&lt;br&gt;   Refer to &lt;a href&#x3D;\&quot;https://ads-help.yahoo.co.jp/yahooads/display/articledetail?lan&#x3D;en&amp;aid&#x3D;37704\&quot;&gt;Help page&lt;/a&gt; for more details about hashed Email Address. &lt;/div&gt; &lt;/div&gt; &lt;dl class&#x3D;term&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;IDFA&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;iOS端末用広告識別子です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Ad identifier for iOS devices.&lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;AAID&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;Android端末用広告識別子です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Ad identifier for Android devices.&lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;MAIL_ADDRESS&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;ハッシュ化メールアドレスです。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Hashed email address.&lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;UNKNOWN&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;未知の値です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Unknown Value&lt;/span&gt;&lt;/dd&gt; &lt;/dl&gt; (required)
     * @param  \OpenAPI\Client\Model\RetargetingListServiceUploadUserListCompressType $compress_type &lt;div lang&#x3D;\&quot;ja\&quot;&gt;RetargetingListServiceUploadUserListCompressTypeは、アップロードするファイルの圧縮形式を表します。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;RetargetingListServiceUploadUserListCompressType displays kind of compress type of upload file.&lt;/div&gt; &lt;dl class&#x3D;term&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;NONE&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;非圧縮形式です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Uncompressed format.&lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;ZIP&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;ZIP形式です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;ZIP format. &lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;GZIP&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;GZIP形式です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;GZIP format.&lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;UNKNOWN&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;未知の値です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Unknown Value&lt;/span&gt;&lt;/dd&gt; &lt;/dl&gt; (required)
     * @param  string $custom_user_id &lt;div lang&#x3D;\&quot;ja\&quot;&gt;   customUserIdの指定は、一部の利用者向けの限定機能となります。 &lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;   Specifying customUserId is a limited function for some users. &lt;/div&gt; (optional)
     * @param  \SplFileObject $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retargetingListServiceUploadUserListPostAsyncWithHttpInfo($account_id, $retargeting_tag_id, $target_list_id, $upload_type, $compress_type, $custom_user_id = null, $body = null)
    {
        $returnType = '\OpenAPI\Client\Model\RetargetingListServiceUploadUserListResponse';
        $request = $this->retargetingListServiceUploadUserListPostRequest($account_id, $retargeting_tag_id, $target_list_id, $upload_type, $compress_type, $custom_user_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retargetingListServiceUploadUserListPost'
     *
     * @param  int $account_id &lt;div lang&#x3D;\&quot;ja\&quot;&gt;アカウントIDです。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;Account ID.&lt;/div&gt; (required)
     * @param  string $retargeting_tag_id &lt;div lang&#x3D;\&quot;ja\&quot;&gt;サイトリターゲティングのタグIDです。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;Tag ID for site retargeting.&lt;/div&gt; (required)
     * @param  int $target_list_id &lt;div lang&#x3D;\&quot;ja\&quot;&gt;カスタムオーディエンスのターゲットリストIDです。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;Target list ID for the custom audience.&lt;/div&gt; (required)
     * @param  \OpenAPI\Client\Model\RetargetingListServiceUploadUserListUploadType $upload_type &lt;div lang&#x3D;\&quot;ja\&quot;&gt;   RetargetingListServiceUploadUserListUploadTypeは、アップロードする方法の種類を表します。&lt;br&gt;   ハッシュ化メールアドレスの詳細については、&lt;a href&#x3D;\&quot;https://ads-help.yahoo.co.jp/yahooads/display/articledetail?lan&#x3D;ja&amp;aid&#x3D;69234\&quot;&gt;ヘルプ&lt;/a&gt;をご参照ください。 &lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;   RetargetingListServiceUploadUserListUploadType displays kind of upload method.&lt;br&gt;   Refer to &lt;a href&#x3D;\&quot;https://ads-help.yahoo.co.jp/yahooads/display/articledetail?lan&#x3D;en&amp;aid&#x3D;37704\&quot;&gt;Help page&lt;/a&gt; for more details about hashed Email Address. &lt;/div&gt; &lt;/div&gt; &lt;dl class&#x3D;term&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;IDFA&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;iOS端末用広告識別子です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Ad identifier for iOS devices.&lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;AAID&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;Android端末用広告識別子です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Ad identifier for Android devices.&lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;MAIL_ADDRESS&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;ハッシュ化メールアドレスです。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Hashed email address.&lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;UNKNOWN&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;未知の値です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Unknown Value&lt;/span&gt;&lt;/dd&gt; &lt;/dl&gt; (required)
     * @param  \OpenAPI\Client\Model\RetargetingListServiceUploadUserListCompressType $compress_type &lt;div lang&#x3D;\&quot;ja\&quot;&gt;RetargetingListServiceUploadUserListCompressTypeは、アップロードするファイルの圧縮形式を表します。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;RetargetingListServiceUploadUserListCompressType displays kind of compress type of upload file.&lt;/div&gt; &lt;dl class&#x3D;term&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;NONE&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;非圧縮形式です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Uncompressed format.&lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;ZIP&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;ZIP形式です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;ZIP format. &lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;GZIP&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;GZIP形式です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;GZIP format.&lt;/span&gt;&lt;/dd&gt;   &lt;dt class&#x3D;\&quot;term__item\&quot;&gt;&lt;code&gt;UNKNOWN&lt;/dt&gt;   &lt;dd class&#x3D;\&quot;term__desc\&quot;&gt;&lt;span lang&#x3D;\&quot;ja\&quot;&gt;未知の値です。&lt;/span&gt;&lt;span lang&#x3D;\&quot;en\&quot;&gt;Unknown Value&lt;/span&gt;&lt;/dd&gt; &lt;/dl&gt; (required)
     * @param  string $custom_user_id &lt;div lang&#x3D;\&quot;ja\&quot;&gt;   customUserIdの指定は、一部の利用者向けの限定機能となります。 &lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;   Specifying customUserId is a limited function for some users. &lt;/div&gt; (optional)
     * @param  \SplFileObject $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retargetingListServiceUploadUserListPostRequest($account_id, $retargeting_tag_id, $target_list_id, $upload_type, $compress_type, $custom_user_id = null, $body = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling retargetingListServiceUploadUserListPost'
            );
        }
        // verify the required parameter 'retargeting_tag_id' is set
        if ($retargeting_tag_id === null || (is_array($retargeting_tag_id) && count($retargeting_tag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $retargeting_tag_id when calling retargetingListServiceUploadUserListPost'
            );
        }
        // verify the required parameter 'target_list_id' is set
        if ($target_list_id === null || (is_array($target_list_id) && count($target_list_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_list_id when calling retargetingListServiceUploadUserListPost'
            );
        }
        // verify the required parameter 'upload_type' is set
        if ($upload_type === null || (is_array($upload_type) && count($upload_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $upload_type when calling retargetingListServiceUploadUserListPost'
            );
        }
        // verify the required parameter 'compress_type' is set
        if ($compress_type === null || (is_array($compress_type) && count($compress_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $compress_type when calling retargetingListServiceUploadUserListPost'
            );
        }

        $resourcePath = '/RetargetingListService/uploadUserList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($account_id !== null) {
            if('form' === 'form' && is_array($account_id)) {
                foreach($account_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['accountId'] = $account_id;
            }
        }
        // query params
        if ($retargeting_tag_id !== null) {
            if('form' === 'form' && is_array($retargeting_tag_id)) {
                foreach($retargeting_tag_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['retargetingTagId'] = $retargeting_tag_id;
            }
        }
        // query params
        if ($target_list_id !== null) {
            if('form' === 'form' && is_array($target_list_id)) {
                foreach($target_list_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['targetListId'] = $target_list_id;
            }
        }
        // query params
        if ($upload_type !== null) {
            if('form' === 'form' && is_array($upload_type)) {
                foreach($upload_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['uploadType'] = $upload_type;
            }
        }
        // query params
        if ($compress_type !== null) {
            if('form' === 'form' && is_array($compress_type)) {
                foreach($compress_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['compressType'] = $compress_type;
            }
        }
        // query params
        if ($custom_user_id !== null) {
            if('form' === 'form' && is_array($custom_user_id)) {
                foreach($custom_user_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customUserId'] = $custom_user_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/octet-stream']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
